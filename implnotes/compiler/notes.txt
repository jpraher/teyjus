The contents of this document are likely to change.  And this is way too
rough to be useful yet.

The compiler takes the following broad steps in order to compile a module.
First, the module is parsed to produce a preabsyn representation of it.  Then
the module is translated to abstract syntax using the TRANSLATE module.  This
representation may be used to generate code.

MAIN:
	This module contains the entry point for the compiler.

COMPILE:
	This module provides access to the lexer and parser.  The exported function
	"compile" returns the preabsyn representation of the given module.  This
	module also contains a few flags that control how compilation proceeds (ie,
	whether to print out abstract syntax).  These flags will likely be moved to
	MAIN.
	
	LPYACC:
		This module contains the parser built from the specification in the file
		"lpyacc.mly".

	LPLEX:
		This module contains the lexer built from the specification in the file
		"lplex.mll".

TRANSLATE:
	This module contains routines for translating the various parts of a module
	from preabsyn to absyn.  In order to effect this translation, a number of
	steps are followed.  First, the signature of the module is obtained in
	preabsyn using the COMPILE module.  This is processed to yeild the kind and
	constant tables for the signature (and any accumulated signatures).  Then,
	the signatures of the modules that the module being compiled accumulates are
	parsed and processed similarly.  Finally the module itself is processed and
	has its kind and constant tables constructed.  
	
	Next the clauses are processed using the generated tables, using module
	PARSETERMS. The result of all of this is an abstract representation of a
	module.  The clauses are represented in an unnormaized form.  The
	abstraction variables are still named (they are not indices).
	
	Next the clauses are normalized using CLAUSES module.
	
	The main exported function is "translate", the result of which is an abstract
	syntax representation of a module.

PARSETERMS:
	This module contains routines to parse a list of preabsyn tokens into terms.

ABSYN:
	This is an ocaml representation of the abstract syntax.  This module contains
	the corresponding type declarations, as well as utility functions to print
	a piece of abstract syntax.

PREABSYN:
	This module contains the preabsyn type declarations, as well as utility
	functions to print a piece of preabstract syntax.

SYMBOL:
	Contains routines for keeping track of symbols encountered.

TABLE:
	This contains the representation for the various symbol tables.  All of
	these are based on the Map module defined in the ocaml standard library,
	which is based on red-black binary trees.  The module "SymbolTable" within
	this file is table whose key type is a symbol (as defined in the SYMBOL
	module) and whose value is any type.

ERRORMSG:
	Routines for recording file positions and printing error messages.  File
	positions contain the name of the file to which the they refer, so that
	positions in multiple files can be safely recorded.
