                          DEPENDENCIES
                          ============

                           ---*nix---
  The following dependencies must be in the path:

  OCaml
  omake
  diff
  flex
  bison

                          ---Windows---
  The following dependencies must be in the path.  Listed is a place
  to get either the actual dependency, or information on procuring it.

  OCaml                           http://caml.inria.fr/
  Microsoft Visual Studio 2008    http://msdn.microsoft.com/vstudio/
  ocamake                         /util/ocamake.ml  (included)
  flex                            http://gnuwin32.sourceforge.net/
  bison                           http://gnuwin32.sourceforge.net/

                          BUILD SYSTEM
                          ============

                          ---*nix---

  To build the system in a *nix environment, simply use omake:

  component                   command                  path
  -----------------------------------------------------------------
  compiler                  omake tjcc                 teyjus/source
  
  simulator                 omake tjsim                teyjus/source
  
  disassembler              omake tjdis                teyjus/source
  
  linker (debug only)       omake tjlink               teyjus/source/linker
  
  all                       omake all                  teyjus/source

                          ---Windows---
  Installing dependencies:
    Make sure that O'Caml is installed and in your path.
    Make sure that flex and bison are in your path.
    Build ocamake and make sure it is in your path.  To build ocamake,
    run this command in the /util directory of the distribution:
      ocamlc unix.cma str.cma ocamake.ml -o ocamake.exe
    Then, copy that file into your ocaml/bin directory, or alternatively
    modify your path.

  Building the System:
    To build the system in a Windows environment, use the provided
    Microsoft Visual Studio 2008 solution file, (/source/VisualStudio/Teyjus.sln).
    
    To build the system, first set the number of parallel build threads to 1, by
    clicking Tools > Options, and then selecting Project Solutions > Build and Run,
    and finally changing "maximum number of parallel project builds" to 1.

    Then, simply "Build All" (Ctrl + Alt + F7).

    The result should be "6 succeeded, 1 skipped."  The linker is not yet
    available for standalone use, and so is skipped. The produced binaries
    will be written to /source/VisualStudio/Debug/. 

    Alternatively, it should be possible to build projects indivually by
    simply building a particular project using "Build Project" (Ctrl + Shift + B).
  
    If you have trouble building the solution, try running the script
    /source/VisualStudio/clean.bat.  It removes ocaml object files that Visual
    Studio doesn't know about.

    Note that there is no support for building Teyjus using omake on Windows as
    of yet.

  Testing:
    Note that the testing harness does not work on Windows.

                            SYSTEM USAGE
                            ============

  1. compiler (teyjus/source/tjcc)
  --------------------------------
  
  Usage: tjcc <options> <module-names>
  options are:
    -o         Specifies the name of the output bytecode file
    --output   Specifies the name of the output bytecode file
    -p         Add PATH to the search path.
    --path     Add PATH to the search path.
    --log      Enable logging information.
    --log      Enable logging information.
    -v         Return the system version
    --version  Return the system version
    -help      Display this list of options
    --help     Display this list of options
  
  
  2. simulator (tejus/source/tjsim)
  ---------------------------------
  
  Usage: tjsim -b <options> <module-name>
  options are:
    -p         Add PATH to the search path.
    --path     Add PATH to the search path.
    -s         Solve the given query on startup. Several queries may be specified
    --solve    Solve the given query on startup. Several queries may be specified
    -e         Expect at least this many solutions from each query;
                  error if fewer. Valid only in batch mode
    --expect   Expect at least this many solutions from each query;
                  error if fewer. Valid only in batch mode
    -m         Halt after this many solutions to the query have been found.
                  Valid only in batch mode
    --maximum  Halt after this many solutions to the query have been found.
                  Valid only in batch mode
    -q         Suppress all non-error output from the system,
                  except variable bindings on query success
    --quiet    Suppress all non-error output from the system,
                  except variable bindings on query success
    -b         Suppress system interaction; send all output without stopping
    --batch    Suppress system interaction; send all output without stopping
    -k         Allocate a heap of the given size (K)
    --heap     Allocate a heap of the given size (K)
    -v         Return the system version
    --version  Return the system version
    -help      Display this list of options
    --help     Display this list of options
  
  
  Note that the interactive interface is not implemented. The simulator only
  works in batch mode (with option -b specified).
  
  3. disassembler (teyjus/source/tjdis)
  -------------------------------------
  
  Usage: tjdis <options> <object-file>
  options are:
    -t         Only print tables
    --table    Only print tables
    -i         Only print instructions
    --instr    Only print instructions
    -l         Disassemble linked file
    --link     Disassemble linked file
    -v         Return the system version
    --version  Return the system version
    -help      Display this list of options
    --help     Display this list of options
  
  
  4. linker (teyjus/source/linker/tjlink) DEBUG ONLY
  --------------------------------------------------
  Note that the linker is not generally intended for
  stand-alone use.
  
  Usage: tjlink <top-level module name>
  
  


                            TESTING
                            =======

                       ---*nix---

  All tests reside in teyjus/source/test.

  1. testing compiler:

    a. all test cases:
       use "omake compiler-test" under teyjus/source/test

    b. individual test case:
       use "omake compiler-test" under the directory containing a test case


  2. testing linker:

    a. all test cases:
       use "omake test" under teyjus/source/test

    b. individual test case:
       use "omake test" under the directory containing a test case


  3. system test

     use "omake system-test" under teyjus/source/test

                          ---Windows---

  The testing harness does not currently work on Windows.

                          DOCUMENTATION
                          =============
  See also:
    /source/compiler/README
    /source/front/README
    /source/include/README
    /source/linker/README
    /source/loader/README
    /source/simulator/README
    /source/system/README
    /source/tables/README
    