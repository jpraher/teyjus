Disassembling from bytecode file: general_tr.lpo
Bytecode version: 2
Module name: general_tr

LABEL               INSTRUCTION              OPERANDS

L0                  fail                     
                    try_me_else              #0, L0
tailrec             allocate                 #2
                    get_m_structure          A1, fix, #1
                    unify_variable_t         A2
                    finish_unify             
                    incr_universe            
                    set_univ_tag             Y1, <hidden const #0>
                    push_impl_point          #1, <impl #0>
                    put_app                  A1, A2, #1
                    globalize_pt             Y1, A255
                    set_value_t              A255
                    head_normalize_t         A1
                    call_link_only           #1, <local const #0>
                    pop_impl_point           
                    decr_universe            
                    deallocate               
                    proceed                  
<local const #0>    try_me_else              #1, L1
                    allocate                 #2
                    get_m_structure          A1, abs, #1
                    unify_variable_t         A2
                    finish_unify             
                    incr_universe            
                    set_univ_tag             Y1, <hidden const #1>
                    push_impl_point          #1, <impl #1>
                    put_app                  A1, A2, #1
                    globalize_pt             Y1, A255
                    set_value_t              A255
                    head_normalize_t         A1
                    call_link_only           #1, <local const #0>
                    pop_impl_point           
                    decr_universe            
                    deallocate               
                    proceed                  
L1                  trust_me                 #1
                    head_normalize_t         A1
                    execute_link_only        <local const #2>
<local const #2>    try_me_else              #1, L2
                    allocate                 #3
                    get_m_structure          A1, cond, #3
                    unify_variable_t         A1
                    unify_variable_p         Y1
                    unify_variable_p         Y2
                    finish_unify             
                    head_normalize_t         A1
                    call_name                #2, term
                    put_value_p              Y1, A1
                    head_normalize_t         A1
                    call_link_only           #2, <local const #2>
                    put_value_p              Y2, A1
                    head_normalize_t         A1
                    deallocate               
                    execute_link_only        <local const #2>
L2                  trust_me                 #1
                    head_normalize_t         A1
                    execute                  L3
                    try_me_else              #0, L0
<local const #1>    allocate                 #2
                    get_m_structure          A1, app, #2
                    unify_variable_t         A1
                    unify_variable_p         Y1
                    finish_unify             
                    head_normalize_t         A1
                    call_name                #1, <local const #1>
                    put_value_p              Y1, A1
                    head_normalize_t         A1
                    deallocate               
                    execute_name             term
L3                  try_me_else              #1, L4
                    head_normalize_t         A1
                    execute_name             term
L4                  trust_me                 #1
                    head_normalize_t         A1
                    execute_name             <local const #1>
term                switch_on_reg            #1, L5, L6
L5                  try                      #1, L6
                    trust_ext                #1, #1
                    try_me_else              #0, L0
L6                  init_variable_t          A2, Y1
                    pattern_unify_t          A2, A1
                    finish_unify             
                    proceed                  
<local const #1>    switch_on_reg            #1, L7, L8
L7                  try                      #1, L8
                    trust_ext                #1, #1
                    try_me_else              #0, L0
L8                  init_variable_t          A2, Y1
                    pattern_unify_t          A2, A1
                    finish_unify             
                    proceed                  

Global kind table:
0: tm/0

Local kind table:

Type skeleton table:
0: (tm -> o)
1: ((tm -> tm) -> tm)
2: (tm -> (tm -> (tm -> tm)))
3: (tm -> (tm -> tm))
4: (int -> tm)
5: tm
6: (tm -> tm)

Global constant table: 
0: tailrec (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
1: fix (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #1
2: abs (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #1
3: term (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
4: cond (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #2
5: app (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
6: c (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #4
7: truth (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
8: false (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
9: && (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
10: plus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
11: minus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
12: times (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
13: lss (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
14: eq (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
15: intp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
16: pr (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
17: prp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
18: fst (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
19: snd (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
20: null (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
21: cons (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
22: hd (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
23: tl (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
24: nullp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
25: err (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5

Local constant table: 
0:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
1:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
2:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0

Hidden constant table: 
0:  Type Skeleton: #5
1:  Type Skeleton: #5

String table:

Implication Tables:
0:
  Predicate definitions possibly extending previous ones: 1
   <local const #1>
  Find function type: hash
  In-core table size: 1
   <local const #1>
1:
  Predicate definitions possibly extending previous ones: 1
   term
  Find function type: hash
  In-core table size: 1
   term

Hash tables:

Module table:
  Predicate definitions possibly extending previous ones: 0
  Exportdef predicates: 1
   tailrec
  Local predicates: 3
   <local const #0>
   <local const #1>
   <local const #2>
  Find function type: hash
  In-core table size: 4
   <local const #0>
   <local const #1>
   <local const #2>
   tailrec

Accumulated tables:
0: refl_syntax
    Kind renamings:
    tm -> tm
    Constant renamings:
    term -> term
    cond -> cond
    fix -> fix
    c -> c
    truth -> truth
    false -> false
    && -> &&
    plus -> plus
    minus -> minus
    times -> times
    lss -> lss
    eq -> eq
    intp -> intp
    pr -> pr
    prp -> prp
    fst -> fst
    snd -> snd
    null -> null
    cons -> cons
    hd -> hd
    tl -> tl
    nullp -> nullp
    err -> err
    abs -> abs
    app -> app

Imported tables:
