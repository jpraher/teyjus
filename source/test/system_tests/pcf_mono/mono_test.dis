Disassembling from bytecode file: mono_test.lpo
Bytecode version: 2
Module name: mono_test

LABEL               INSTRUCTION              OPERANDS

L2                  fail                     
mono_test           switch_on_reg            #1, L0, L1
L0                  try                      #2, L1
                    trust_ext                #2, #1
                    try_me_else              #0, L2
L1                  allocate                 #3
                    get_variable_p           Y1, A2
                    head_normalize_t         A1
                    put_variable_p           Y2, A2
                    call_link_only           #2, <local const #0>
                    put_unsafe_value         Y2, A1
                    head_normalize_t         A1
                    put_value_p              Y1, A2
                    head_normalize_t         A2
                    deallocate               
                    execute_name             infer

Global kind table:
0: tm/0
1: ty/0

Local kind table:

Type skeleton table:
0: (string -> (tm -> o))
1: (string -> (ty -> o))
2: (tm -> (ty -> o))
3: (ty -> (ty -> ty))
4: (ty -> ty)
5: ty
6: ((tm -> tm) -> tm)
7: (tm -> (tm -> tm))
8: (tm -> (tm -> (tm -> tm)))
9: (int -> tm)
10: tm

Global constant table: 
0: mono_test (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #1
1: infer (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #2
2: --> (Infixr, precedence 5)
    Env Size: 0, Type Skeleton: #3
3: lst (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #4
4: num (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
5: bool (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
6: fn (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
7: @ (Infixl, precedence 6)
    Env Size: 0, Type Skeleton: #7
8: fixpt (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #6
9: cond (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #8
10: in (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
11: and (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
12: or (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
13: false (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
14: truth (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
15: car (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
16: cdr (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
17: cons (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
18: nullp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
19: consp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
20: empty (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
21: equal (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
22: greater (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
23: zerop (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
24: minus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
25: plus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10
26: times (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #10

Local constant table: 
0:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0

Hidden constant table: 

String table:

Implication Tables:

Hash tables:

Module table:
  Predicate definitions possibly extending previous ones: 1
   mono_test
  Exportdef predicates: 0
  Local predicates: 0
  Find function type: hash
  In-core table size: 1
   mono_test

Accumulated tables:
0: examples
    Kind renamings:
    tm -> tm
    Constant renamings:
    prog -> <local const #0>
    fn -> fn
    @ -> @
    fixpt -> fixpt
    cond -> cond
    in -> in
    and -> and
    or -> or
    false -> false
    truth -> truth
    car -> car
    cdr -> cdr
    cons -> cons
    nullp -> nullp
    consp -> consp
    empty -> empty
    equal -> equal
    greater -> greater
    zerop -> zerop
    minus -> minus
    plus -> plus
    times -> times
1: monoinfer
    Kind renamings:
    ty -> ty
    tm -> tm
    Constant renamings:
    infer -> infer
    --> -> -->
    lst -> lst
    num -> num
    bool -> bool
    fn -> fn
    @ -> @
    fixpt -> fixpt
    cond -> cond
    in -> in
    and -> and
    or -> or
    false -> false
    truth -> truth
    car -> car
    cdr -> cdr
    cons -> cons
    nullp -> nullp
    consp -> consp
    empty -> empty
    equal -> equal
    greater -> greater
    zerop -> zerop
    minus -> minus
    plus -> plus
    times -> times

Imported tables:
