Disassembling from bytecode file: poly_test.lpo
Bytecode version: 2
Module name: poly_test

LABEL               INSTRUCTION              OPERANDS

L2                  fail                     
poly_test           switch_on_reg            #1, L0, L1
L0                  try                      #2, L1
                    trust_ext                #2, #1
                    try_me_else              #0, L2
L1                  allocate                 #3
                    get_variable_p           Y1, A2
                    head_normalize_t         A1
                    put_variable_p           Y2, A2
                    call_link_only           #2, <local const #0>
                    put_unsafe_value         Y2, A1
                    head_normalize_t         A1
                    put_value_p              Y1, A2
                    head_normalize_t         A2
                    deallocate               
                    execute_name             polyinfer

Global kind table:
0: tm/0
1: ty/0
2: poly/0

Local kind table:

Type skeleton table:
0: (string -> (tm -> o))
1: (tm -> (poly -> o))
2: (string -> (poly -> o))
3: ((ty -> poly) -> poly)
4: (ty -> poly)
5: ((tm -> tm) -> tm)
6: (tm -> (tm -> tm))
7: (tm -> (tm -> (tm -> tm)))
8: (int -> tm)
9: tm
10: (ty -> (ty -> ty))
11: (ty -> ty)
12: ty

Global constant table: 
0: polyinfer (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #1
1: poly_test (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #2
2: all (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #3
3: c (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #4
4: fn (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
5: @ (Infixl, precedence 6)
    Env Size: 0, Type Skeleton: #6
6: fixpt (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
7: cond (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #7
8: in (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #8
9: and (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
10: or (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
11: false (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
12: truth (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
13: car (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
14: cdr (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
15: cons (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
16: nullp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
17: consp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
18: empty (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
19: equal (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
20: greater (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
21: zerop (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
22: minus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
23: plus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
24: times (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #9
25: --> (Infixr, precedence 5)
    Env Size: 0, Type Skeleton: #10
26: lst (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #11
27: num (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #12
28: bool (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #12

Local constant table: 
0:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0

Hidden constant table: 

String table:

Implication Tables:

Hash tables:

Module table:
  Predicate definitions possibly extending previous ones: 1
   poly_test
  Exportdef predicates: 0
  Local predicates: 0
  Find function type: hash
  In-core table size: 1
   poly_test

Accumulated tables:
0: examples
    Kind renamings:
    tm -> tm
    Constant renamings:
    prog -> <local const #0>
    fn -> fn
    @ -> @
    fixpt -> fixpt
    cond -> cond
    in -> in
    and -> and
    or -> or
    false -> false
    truth -> truth
    car -> car
    cdr -> cdr
    cons -> cons
    nullp -> nullp
    consp -> consp
    empty -> empty
    equal -> equal
    greater -> greater
    zerop -> zerop
    minus -> minus
    plus -> plus
    times -> times
1: polyinfer
    Kind renamings:
    poly -> poly
    ty -> ty
    tm -> tm
    Constant renamings:
    polyinfer -> polyinfer
    all -> all
    c -> c
    --> -> -->
    lst -> lst
    num -> num
    bool -> bool
    fn -> fn
    @ -> @
    fixpt -> fixpt
    cond -> cond
    in -> in
    and -> and
    or -> or
    false -> false
    truth -> truth
    car -> car
    cdr -> cdr
    cons -> cons
    nullp -> nullp
    consp -> consp
    empty -> empty
    equal -> equal
    greater -> greater
    zerop -> zerop
    minus -> minus
    plus -> plus
    times -> times

Imported tables:
