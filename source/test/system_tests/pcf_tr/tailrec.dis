Disassembling from bytecode file: tailrec.lpo
Bytecode version: 2
Module name: tailrec

LABEL               INSTRUCTION              OPERANDS

L7                  fail                     
tailrec             try_me_else              #1, L2
                    allocate                 #2
                    get_m_structure          A1, fixpt, #1
                    unify_variable_t         A1
                    finish_unify             
                    neck_cut                 
                    incr_universe            
                    set_univ_tag             Y1, <hidden const #0>
                    push_impl_point          #1, <impl #0>
                    put_value_t              A1, A2
                    put_app                  A1, A2, #1
                    globalize_pt             Y1, A255
                    set_value_t              A255
                    head_normalize_t         A1
                    call_link_only           #1, <local const #0>
                    pop_impl_point           
                    decr_universe            
                    deallocate               
                    proceed                  
L2                  trust_me                 #1
                    proceed                  
<local const #0>    try_me_else              #1, L3
                    allocate                 #2
                    get_m_structure          A1, fn, #1
                    unify_variable_t         A2
                    finish_unify             
                    incr_universe            
                    set_univ_tag             Y1, <hidden const #1>
                    push_impl_point          #1, <impl #1>
                    put_app                  A1, A2, #1
                    globalize_pt             Y1, A255
                    set_value_t              A255
                    head_normalize_t         A1
                    call_link_only           #1, <local const #0>
                    pop_impl_point           
                    decr_universe            
                    deallocate               
                    proceed                  
L3                  trust_me                 #1
                    head_normalize_t         A1
                    execute_link_only        <local const #2>
<local const #2>    try_me_else              #1, L4
                    switch_on_term           L5, L6, L7, L5
L5                  try_me_else              #1, L8
L1                  allocate                 #3
                    get_m_structure          A1, cond, #3
                    unify_variable_t         A1
                    unify_variable_p         Y1
                    unify_variable_p         Y2
                    finish_unify             
                    head_normalize_t         A1
                    call_name                #2, term
                    put_value_p              Y1, A1
                    head_normalize_t         A1
                    call_link_only           #2, <local const #2>
                    put_value_p              Y2, A1
                    head_normalize_t         A1
                    deallocate               
                    execute_link_only        <local const #2>
L8                  trust_me                 #1
L0                  allocate                 #2
                    get_m_structure          A1, @, #2
                    unify_variable_t         A1
                    unify_variable_p         Y1
                    finish_unify             
                    neck_cut                 
                    head_normalize_t         A1
                    call_link_only           #1, <local const #2>
                    put_value_p              Y1, A1
                    head_normalize_t         A1
                    deallocate               
                    execute_name             term
L6                  switch_on_constant       #2, <hash #0>
L4                  trust_me                 #1
                    head_normalize_t         A1
                    execute                  L9
L9                  try_me_else              #1, L10
                    head_normalize_t         A1
                    execute_name             <local const #1>
L10                 trust_me                 #1
                    head_normalize_t         A1
                    execute_name             term
term                switch_on_reg            #1, L11, L12
L11                 try                      #1, L12
                    trust_ext                #1, #1
                    try_me_else              #0, L7
L12                 init_variable_t          A2, Y1
                    pattern_unify_t          A2, A1
                    finish_unify             
                    proceed                  
<local const #1>    switch_on_reg            #1, L13, L14
L13                 try                      #1, L14
                    trust_ext                #1, #1
                    try_me_else              #0, L7
L14                 init_variable_t          A2, Y1
                    pattern_unify_t          A2, A1
                    finish_unify             
                    proceed                  

Global kind table:
0: tm/0

Local kind table:

Type skeleton table:
0: (tm -> o)
1: ((tm -> tm) -> tm)
2: (tm -> (tm -> (tm -> tm)))
3: (tm -> (tm -> tm))
4: (int -> tm)
5: tm

Global constant table: 
0: tailrec (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
1: fixpt (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #1
2: fn (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #1
3: term (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
4: cond (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #2
5: @ (Infixl, precedence 6)
    Env Size: 0, Type Skeleton: #3
6: in (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #4
7: and (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
8: or (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
9: false (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
10: truth (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
11: car (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
12: cdr (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
13: cons (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
14: nullp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
15: consp (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
16: empty (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
17: equal (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
18: greater (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
19: zerop (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
20: minus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
21: plus (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5
22: times (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #5

Local constant table: 
0:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
1:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0
2:  (No Fixity, precedence 0)
    Env Size: 0, Type Skeleton: #0

Hidden constant table: 
0:  Type Skeleton: #5
1:  Type Skeleton: #5

String table:

Implication Tables:
0:
  Predicate definitions possibly extending previous ones: 1
   <local const #1>
  Find function type: hash
  In-core table size: 1
   <local const #1>
1:
  Predicate definitions possibly extending previous ones: 1
   term
  Find function type: hash
  In-core table size: 1
   term

Hash tables:
0:
    Table size: 2
    Constants:
    @ -> L0
    cond -> L1

Module table:
  Predicate definitions possibly extending previous ones: 0
  Exportdef predicates: 1
   tailrec
  Local predicates: 2
   <local const #0>
   <local const #2>
  Find function type: hash
  In-core table size: 3
   <local const #0>
   <local const #2>
   tailrec

Accumulated tables:
0: refl_syntax
    Kind renamings:
    tm -> tm
    Constant renamings:
    term -> term
    fn -> fn
    @ -> @
    fixpt -> fixpt
    cond -> cond
    in -> in
    and -> and
    or -> or
    false -> false
    truth -> truth
    car -> car
    cdr -> cdr
    cons -> cons
    nullp -> nullp
    consp -> consp
    empty -> empty
    equal -> equal
    greater -> greater
    zerop -> zerop
    minus -> minus
    plus -> plus
    times -> times

Imported tables:
