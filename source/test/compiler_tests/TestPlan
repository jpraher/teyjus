Term structures:
===============

  (1) abstractions            -- test1
      a. abstractions as head argument
      b. abstractions as goal or application argument
      c. nested abstractions in the above two cases

  (2) flexible applications   -- test2
      a. flexible application as head argument
      b. flexible application as goal or application argument

  (3) constants with types    -- test3
      a. constants with types as head argument
      b. constants with types as goal argument
      c. constants with types as application argument
      d. constants with types as application head


Clause structures:
==================

  (1) atomic clauses, chain rules and clauses with environments
                             --  test4 
 
  (2) generic goals          --  test5
      a. universal quantified term variables
      b. universal quantified predicate name

  (3) augmented goals        --  test6     

  (4) flexible goals         --  test7
                             --  test36

  (5) disjunction goals      --  test8

  (6) indexing and sequencing:   --  test9
      a. predicate with one clause definition
      b. predicate with two clause definitions
      c. predicate with more than two clauses 
      d. predicate with clauses with constant as first argument
      e. predicate with clauses with list as first argument
      f. predicate with multiple clauses with same constant as first argument  

  (7) cut goals              -- test10
      a. neck cut
      b. deep cut


Variables in clauses:
=====================

  (1) permanent and temporary variables         -- test11

  (2) universal quantified variables in goals   -- test12

  (3) universal quantified variables in the antecedent of implication goals
                                                -- test13
  
  (4) existential quantified variables in goals -- test14

  (5) existential quantified variables in the antecedent of implication goals
                                                -- test15

Accumulates/imports
====================

  (1) renaming:                                 -- test16
      a. global - local renaming
      b. global - global renaming

  (2) call_link_only, execute_link_only         -- test17

  (3) combine definitions                       -- test18, test19, test24

  (4) generating dummy "try_me_else"            -- test21
  (5) accum_sig in modules                      -- test37

MISC
====
  (1) exportdef                                 -- test22
  (2) un-terminated parseTerm bug               -- test23
  (3) "not" predicate bug                       -- test31
  (4) a bug in removing overloads               -- test32, test33
  (5) max string length                         -- test34
  (6) a bug in register assignment              -- test35

Compiler front 
==============
(Please refer to teyjus/implnotes/compiler/compiler_testing for the detailed
 description.)

  Parsing
  -------

   (1) constant fixity and precedence           -- test25

   (2) redefine pervasive definitions           -- test26

   (3) comma operator                           -- test27

   (4) scoping of bound variables               -- test28

  
  Type Checking
  -------------

   (1) overload operators                       -- test29, overloaded_ops (neg)
       . default type if no specialization      
       . specialization 
       

        
  
  